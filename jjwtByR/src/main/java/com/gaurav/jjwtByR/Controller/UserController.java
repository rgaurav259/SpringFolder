package com.gaurav.jjwtByR.Controller;

import com.gaurav.jjwtByR.Model.User;
import com.gaurav.jjwtByR.Model.UserRequest;
import com.gaurav.jjwtByR.Model.UserResponse;
import com.gaurav.jjwtByR.Service.IUserService;
import com.gaurav.jjwtByR.Util.JwtUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.security.Principal;

@RestController
@RequestMapping("/user")
public class UserController {

    @Autowired
    private IUserService service;//HAS_A
    @Autowired
    private JwtUtil util;

    @Autowired
    private AuthenticationManager authenticationManager;

    //1.save user data in the database;

    @PostMapping("/save")
    public ResponseEntity<String> saveUser(@RequestBody User user){
        Integer id = service.saveUser(user);
        String body = " User '"+id+"'  saved";
        return new ResponseEntity<String>(body, HttpStatus.OK);
        //return ResponseEntity.ok(body); same as above


    }
    //2.validate user and generate token (login)

    @PostMapping("/login")
    public ResponseEntity<UserResponse> loginUser(@RequestBody UserRequest request){
//principal username and credentials password it will take then authenticated ..becuase it's statelsss
        //if it's form based no need to authenticated
        //principal is basically current user who is trying to login

        authenticationManager
                .authenticate(new UsernamePasswordAuthenticationToken
                        (request.getUsername(),request.getPassword()));

        //if it is valid then only token will be generated ,otherwisse authentication entry point will be triggered

        //TODO validate username /pwd with database if valid then only generate token
        String token = util.generateToken(request.getUsername());

        return ResponseEntity.ok(new UserResponse(token,"success ! generated by gaurav"));
    }




    //after login only ...then check who is logged in

    @PostMapping("/welcome")
    public ResponseEntity<String> accessData(Principal p){
        return ResponseEntity.ok("hello User  " + p.getName());
    }



}
